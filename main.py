import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import os
from dotenv import load_dotenv
import random
import zalgo_text.zalgo as zalgo
import pyfiglet
import re
import requests
import uuid
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv("BOT_TOKEN")
DB_PATH = os.getenv("DB_PATH", "/tmp/textstyler.db")
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456789"))
GIGACHAT_AUTH_KEY = os.getenv("GIGACHAT_AUTH_KEY")
GIGACHAT_CLIENT_ID = os.getenv("GIGACHAT_CLIENT_ID")
if not API_TOKEN:
    raise ValueError("BOT_TOKEN not found in .env file")
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        language TEXT DEFAULT 'ru',
        joined_at TEXT
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS stylizations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        style TEXT,
        preset TEXT,
        text TEXT,
        created_at TEXT
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS triggers (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        keyword TEXT,
        style TEXT,
        preset TEXT
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS restricted_styles (
        user_id INTEGER,
        style TEXT,
        PRIMARY KEY (user_id, style)
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS group_templates (
        chat_id INTEGER PRIMARY KEY,
        preset TEXT
    )""")
    conn.commit()
    conn.close()

init_db()

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)
LANGUAGES = {
    "ru": {
        "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TextStyler Pro! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /style –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞, /preset –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º —Å @{}",
        "style_menu": "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:",
        "preset_menu": "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:",
        "admin_menu": "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n- /users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n- /broadcast: –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º\n- /set_group_template: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –≥—Ä—É–ø–ø—ã",
        "history": "–í–∞—à–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:\n{}",
        "no_history": "–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–π.",
        "enter_text": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –≤ {}:",
        "broadcast_sent": "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        "style_restricted": "–°—Ç–∏–ª—å '{}' –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è –≤–∞—Å.",
        "auto_formatted": "–¢–µ–∫—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{}'.",
        "help": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /style, /preset, /random, /history, /export_pdf –∏–ª–∏ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º @{}",
        "gigachat_error": "–û—à–∏–±–∫–∞ API GigaChat, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: {}",
        "pdf_exported": "–¢–µ–∫—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ PDF!",
        "set_group_template": "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã:",
        "group_template_set": "–®–∞–±–ª–æ–Ω '{}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.",
        "choose_tone": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω –¥–ª—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:"
    }
}

# –°—Ç–∏–ª–∏
STYLES = {
    "bold": lambda text: f"<b>{text}</b>",
    "italic": lambda text: f"<i>{text}</i>",
    "mono": lambda text: f"<code>{text}</code>",
    "strike": lambda text: f"<s>{text}</s>",
    "link": lambda text: f"<a href='https://example.com'>{text}</a>",
    "cursive": lambda text: "".join(chr(0x1D4D0 + ord(c) - ord('a')) if c.islower() else c for c in text),
    "box": lambda text: f"üÖ± {text} üÖæ",
    "monospace": lambda text: f"üá≤üá¥üá≥üá¥üá∏üáµüá¶üá®üá™ {text}",
    "star": lambda text: f"‚òÖ {text} ‚òÖ",
    "fire": lambda text: f"üî• {text} üî•",
    "circle": lambda text: f"‚óâ {text} ‚óâ",
    "important": lambda text: f"üí• –í–ê–ñ–ù–û: {text} üí•",
    "zalgo": lambda text: zalgo.zalgo().zalgofy(text),
    "mirror": lambda text: text[::-1],
    "ascii": lambda text: f"<pre>{pyfiglet.figlet_format(text, font='standard')}</pre>"
}

# –ü—Ä–µ—Å–µ—Ç—ã
PRESETS = {
    "header": lambda text: f"<b>‚ú® {text} ‚ú®</b>",
    "announcement": lambda text: f"üì¢ <b>{text}</b> üì¢",
    "meme": lambda text: f"üòÇ {text.upper()} üòÇ",
    "quote": lambda text: f"üí¨ <i>{text}</i> üí¨",
    "alert": lambda text: f"üö® <b>{text}</b> üö®",
    "holiday": lambda text: f"üéâ {text} üéâ",
    "joke": lambda text: f"üòú {text} üòú",
    "important": lambda text: f"üí• <b>{text}</b> üí•"
}

# –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TRIGGERS = {
    "–≤–∞–∂–Ω–æ": {"preset": "important"},
    "—Å—Ä–æ—á–Ω–æ": {"style": "alert"},
    "–ø—Ä–∞–∑–¥–Ω–∏–∫": {"preset": "holiday"},
    "—à—É—Ç–∫–∞": {"preset": "joke"}
}

# –¢–æ–Ω—ã –¥–ª—è /smartreply
TONES = {
    "sarcastic": "–û—Ç–≤–µ—á–∞–π –≤ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–º –∏ –æ—Å—Ç—Ä–æ—É–º–Ω–æ–º —Ç–æ–Ω–µ",
    "friendly": "–û—Ç–≤–µ—á–∞–π –≤ —Ç—ë–ø–ª–æ–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Ç–æ–Ω–µ",
    "formal": "–û—Ç–≤–µ—á–∞–π –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –∏ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º —Ç–æ–Ω–µ",
    "neutral": "–û—Ç–≤–µ—á–∞–π –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º –∏ –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ–º —Ç–æ–Ω–µ"
}

# FSM –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ —Ç–æ–Ω–∞
class StyleStates(StatesGroup):
    waiting_for_style_text = State()
    waiting_for_preset_text = State()
    waiting_for_smartreply_tone = State()
    waiting_for_smartreply_text = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_language(user_id):
    return "ru"  # –í—Å–µ–≥–¥–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å—Ç–∏–ª–µ–π
def is_style_restricted(user_id, style):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT 1 FROM restricted_styles WHERE user_id = ? AND style = ?", (user_id, style))
    result = c.fetchone()
    conn.close()
    return bool(result)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –≤ PDF
def export_to_pdf(text, filename="/tmp/output.pdf"):
    c = canvas.Canvas(filename, pagesize=A4)
    c.setFont("Helvetica", 12)
    y = 800
    for line in text.split("\n"):
        c.drawString(50, y, line[:100])
        y -= 20
        if y < 50:
            c.showPage()
            y = 800
    c.save()
    return filename

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –≥—Ä—É–ø–ø—ã
def get_group_template(chat_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT preset FROM group_templates WHERE chat_id = ?", (chat_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ GigaChat
def get_gigachat_token():
    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    payload = {'scope': 'GIGACHAT_API_PERS'}
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': str(uuid.uuid4()),
        'Authorization': f'Basic {GIGACHAT_AUTH_KEY}'
    }
    
    try:
        response = requests.post(url, headers=headers, data=payload, verify=False)
        response.raise_for_status()
        data = response.json()
        return data.get('access_token'), data.get('expires_at')
    except Exception as e:
        logger.error(f"Failed to get GigaChat token: {e}")
        return None, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ GigaChat API
def call_gigachat_api(text, command, tone=None):
    if not GIGACHAT_AUTH_KEY:
        return None
    
    token, expires_at = get_gigachat_token()
    if not token:
        return None
    
    url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}'
    }
    
    prompts = {
        "gigachadify": f"–°–¥–µ–ª–∞–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–≤–µ—Ä–µ–Ω–Ω—ã–º –∏ –º–æ—â–Ω—ã–º, –∫–∞–∫ —É –ì–∏–≥–∞–ß–∞–¥–∞: {text}",
        "make_post": f"–û—Ñ–æ—Ä–º–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ —Å—Ç–∏–ª—å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π: {text}",
        "smartreply": f"{TONES.get(tone, '–û—Ç–≤–µ—á–∞–π –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Ç–æ–Ω–µ')} –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}",
        "rewrite": f"–ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ –∏ —Å—Ç–∏–ª—å–Ω–æ: {text}"
    }
    
    payload = {
        "model": "GigaChat",
        "messages": [
            {"role": "user", "content": prompts[command]}
        ],
        "max_tokens": 200
    }
    
    try:
        response = requests.post(url, headers=headers, json=payload, verify=False)
        response.raise_for_status()
        data = response.json()
        return data['choices'][0]['message']['content']
    except Exception as e:
        logger.error(f"GigaChat API error: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@router.message(CommandStart())
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, username, joined_at) VALUES (?, ?, ?)",
              (user_id, username, datetime.now().isoformat()))
    conn.commit()
    conn.close()

    lang = get_user_language(user_id)
    bot_username = (await bot.get_me()).username
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=f"https://t.me/{bot_username}?startgroup=true")],
        [InlineKeyboardButton(text="üìò –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    await message.answer(LANGUAGES[lang]["welcome"].format(bot_username), reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /help
@router.message(Command("help"))
async def help_command(message: types.Message):
    lang = get_user_language(message.from_user.id)
    bot_username = (await bot.get_me()).username
    await message.answer(LANGUAGES[lang]["help"].format(bot_username))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /style
@router.message(Command("style"))
async def style_command(message: types.Message):
    lang = get_user_language(message.from_user.id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ñ–∏—Ä–Ω—ã–π", callback_data="style_bold"),
         InlineKeyboardButton(text="–ö—É—Ä—Å–∏–≤", callback_data="style_italic")],
        [InlineKeyboardButton(text="–ú–æ–Ω–æ", callback_data="style_mono"),
         InlineKeyboardButton(text="–ó–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π", callback_data="style_strike")],
        [InlineKeyboardButton(text="–ó–≤–µ–∑–¥–∞", callback_data="style_star"),
         InlineKeyboardButton(text="–û–≥–æ–Ω—å", callback_data="style_fire")],
        [InlineKeyboardButton(text="–ó–∞–ª–≥–æ", callback_data="style_zalgo"),
         InlineKeyboardButton(text="–ó–µ—Ä–∫–∞–ª–æ", callback_data="style_mirror")],
        [InlineKeyboardButton(text="ASCII", callback_data="style_ascii")]
    ])
    await message.answer(LANGUAGES[lang]["style_menu"], reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /preset
@router.message(Command("preset"))
async def preset_command(message: types.Message):
    lang = get_user_language(message.from_user.id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–≥–æ–ª–æ–≤–æ–∫", callback_data="preset_header"),
         InlineKeyboardButton(text="–û–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="preset_announcement")],
        [InlineKeyboardButton(text="–ú–µ–º", callback_data="preset_meme"),
         InlineKeyboardButton(text="–¶–∏—Ç–∞—Ç–∞", callback_data="preset_quote")],
        [InlineKeyboardButton(text="–¢—Ä–µ–≤–æ–≥–∞", callback_data="preset_alert"),
         InlineKeyboardButton(text="–ü—Ä–∞–∑–¥–Ω–∏–∫", callback_data="preset_holiday")],
        [InlineKeyboardButton(text="–®—É—Ç–∫–∞", callback_data="preset_joke"),
         InlineKeyboardButton(text="–í–∞–∂–Ω–æ–µ", callback_data="preset_important")]
    ])
    await message.answer(LANGUAGES[lang]["preset_menu"], reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /random
@router.message(Command("random"))
async def random_command(message: types.Message):
    text = message.text.replace("/random", "").strip() or "–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞"
    style = random.choice(list(STYLES.keys()))
    
    if is_style_restricted(message.from_user.id, style):
        lang = get_user_language(message.from_user.id)
        await message.answer(LANGUAGES[lang]["style_restricted"].format(style))
        return
    
    styled_text = STYLES[style](text)
    
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT INTO stylizations (user_id, style, text, created_at) VALUES (?, ?, ?, ?)",
              (message.from_user.id, style, text, datetime.now().isoformat()))
    conn.commit()
    conn.close()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"copy_{styled_text}"),
         InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{style}")],
        [InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", callback_data=f"export_pdf_{styled_text}")]
    ])
    await message.answer(styled_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /history
@router.message(Command("history"))
async def history_command(message: types.Message):
    lang = get_user_language(message.from_user.id)
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT style, preset, text, created_at FROM stylizations WHERE user_id = ? ORDER BY created_at DESC LIMIT 5",
              (message.from_user.id,))
    stylizations = c.fetchall()
    conn.close()
    
    if not stylizations:
        await message.answer(LANGUAGES[lang]["no_history"])
        return
    
    history_text = ""
    for i, (style, preset, text, created_at) in enumerate(stylizations, 1):
        format_type = preset or style or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        history_text += f"{i}. {format_type}: {text} ({created_at})\n"
    
    await message.answer(LANGUAGES[lang]["history"].format(history_text))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /clear
@router.message(Command("clear"))
async def clear_command(message: types.Message):
    text = message.text.replace("/clear", "").strip() or "–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞"
    clean_text = re.sub(r'<[^>]+>|`{1,3}|[\*_~]', '', text)
    await message.answer(clean_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /export_pdf
@router.message(Command("export_pdf"))
async def export_pdf_command(message: types.Message):
    text = message.text.replace("/export_pdf", "").strip() or "–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞"
    filename = f"/tmp/output_{message.from_user.id}.pdf"
    export_to_pdf(text, filename)
    
    lang = get_user_language(message.from_user.id)
    await message.answer_document(types.FSInputFile(filename), caption=LANGUAGES[lang]["pdf_exported"])
    os.remove(filename)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /set_group_template
@router.message(Command("set_group_template"))
async def set_group_template_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    if not message.chat.type in ["group", "supergroup"]:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return
    
    lang = get_user_language(message.from_user.id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–≥–æ–ª–æ–≤–æ–∫", callback_data="group_preset_header"),
         InlineKeyboardButton(text="–û–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="group_preset_announcement")],
        [InlineKeyboardButton(text="–ú–µ–º", callback_data="group_preset_meme"),
         InlineKeyboardButton(text="–¶–∏—Ç–∞—Ç–∞", callback_data="group_preset_quote")],
        [InlineKeyboardButton(text="–¢—Ä–µ–≤–æ–≥–∞", callback_data="group_preset_alert"),
         InlineKeyboardButton(text="–ü—Ä–∞–∑–¥–Ω–∏–∫", callback_data="group_preset_holiday")],
        [InlineKeyboardButton(text="–®—É—Ç–∫–∞", callback_data="group_preset_joke"),
         InlineKeyboardButton(text="–í–∞–∂–Ω–æ–µ", callback_data="group_preset_important")]
    ])
    await message.answer(LANGUAGES[lang]["set_group_template"], reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /admin_panel
@router.message(Command("admin_panel"))
async def admin_panel_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    lang = get_user_language(message.from_user.id)
    await message.answer(LANGUAGES[lang]["admin_menu"])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /users
@router.message(Command("users"))
async def users_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT user_id, username, joined_at FROM users ORDER BY joined_at DESC LIMIT 10")
    users = c.fetchall()
    conn.close()
    
    response = "–ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for user_id, username, joined_at in users:
        response += f"ID: {user_id}, @{username}, –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {joined_at}\n"
    await message.answer(response or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /broadcast
@router.message(Command("broadcast"))
async def broadcast_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    text = message.text.replace("/broadcast", "").strip()
    if not text:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT user_id FROM users")
    users = c.fetchall()
    conn.close()
    
    sent_count = 0
    for (user_id,) in users:
        try:
            await bot.send_message(user_id, text)
            sent_count += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    lang = get_user_language(message.from_user.id)
    await message.answer(LANGUAGES[lang]["broadcast_sent"].format(sent_count))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /smartreply
@router.message(Command("smartreply"))
async def smartreply_command(message: types.Message, state: FSMContext):
    lang = get_user_language(message.from_user.id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π", callback_data="tone_sarcastic"),
         InlineKeyboardButton(text="–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", callback_data="tone_friendly")],
        [InlineKeyboardButton(text="–§–æ—Ä–º–∞–ª—å–Ω—ã–π", callback_data="tone_formal"),
         InlineKeyboardButton(text="–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data="tone_neutral")]
    ])
    await message.answer(LANGUAGES[lang]["choose_tone"], reply_markup=keyboard)
    await state.set_state(StyleStates.waiting_for_smartreply_tone)
    await state.update_data(text=message.text.replace("/smartreply", "").strip() or "–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞")

# –ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º
@router.inline_query()
async def inline_query(inline_query: types.InlineQuery):
    text = inline_query.query or "–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞"
    results = [
        types.InlineQueryResultArticle(
            id="bold", title="–ñ–∏—Ä–Ω—ã–π", description=f"–ñ–∏—Ä–Ω—ã–π: {text}",
            input_message_content=types.InputTextMessageContent(message_text=STYLES["bold"](text))
        ),
        types.InlineQueryResultArticle(
            id="italic", title="–ö—É—Ä—Å–∏–≤", description=f"–ö—É—Ä—Å–∏–≤: {text}",
            input_message_content=types.InputTextMessageContent(message_text=STYLES["italic"](text))
        ),
        types.InlineQueryResultArticle(
            id="fire", title="–û–≥–æ–Ω—å", description=f"–û–≥–æ–Ω—å: {text}",
            input_message_content=types.InputTextMessageContent(message_text=STYLES["fire"](text))
        ),
        types.InlineQueryResultArticle(
            id="zalgo", title="–ó–∞–ª–≥–æ", description=f"–ó–∞–ª–≥–æ: {text}",
            input_message_content=types.InputTextMessageContent(message_text=STYLES["zalgo"](text))
        )
    ]
    await inline_query.answer(results, cache_time=1)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query()
async def callback_query(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data
    lang = get_user_language(callback.from_user.id)
    
    if data.startswith("style_"):
        style = data.replace("style_", "")
        if is_style_restricted(callback.from_user.id, style):
            await callback.message.edit_text(LANGUAGES[lang]["style_restricted"].format(style))
            await callback.answer()
            return
        await state.set_state(StyleStates.waiting_for_style_text)
        await state.update_data(style=style)
        await callback.message.edit_text(LANGUAGES[lang]["enter_text"].format(style), reply_markup=None)
    elif data.startswith("preset_"):
        preset = data.replace("preset_", "")
        await state.set_state(StyleStates.waiting_for_preset_text)
        await state.update_data(preset=preset)
        await callback.message.edit_text(LANGUAGES[lang]["enter_text"].format(preset), reply_markup=None)
    elif data.startswith("group_preset_"):
        preset = data.replace("group_preset_", "")
        if callback.message.chat.type not in ["group", "supergroup"]:
            await callback.message.edit_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            await callback.answer()
            return
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO group_templates (chat_id, preset) VALUES (?, ?)",
                  (callback.message.chat.id, preset))
        conn.commit()
        conn.close()
        await callback.message.edit_text(LANGUAGES[lang]["group_template_set"].format(preset))
    elif data == "help":
        bot_username = (await bot.get_me()).username
        await callback.message.edit_text(LANGUAGES[lang]["help"].format(bot_username))
    elif data.startswith("copy_"):
        styled_text = data.replace("copy_", "")
        await callback.message.edit_text(styled_text, reply_markup=None)
    elif data.startswith("export_pdf_"):
        styled_text = data.replace("export_pdf_", "")
        filename = f"/tmp/output_{callback.from_user.id}.pdf"
        export_to_pdf(styled_text, filename)
        await callback.message.answer_document(types.FSInputFile(filename), caption=LANGUAGES[lang]["pdf_exported"])
        os.remove(filename)
    elif data.startswith("tone_"):
        tone = data.replace("tone_", "")
        data = await state.get_data()
        text = data.get("text", "–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞")
        
        result = call_gigachat_api(text, "smartreply", tone)
        if not result:
            fallback_responses = {
                "sarcastic": f"üòè –û—Ö, {text}? –°–µ—Ä—å—ë–∑–Ω–æ? –≠—Ç–æ... –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç. üòè",
                "friendly": f"üòä –≠–π, {text} –∑–≤—É—á–∏—Ç –∫—Ä—É—Ç–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üòä",
                "formal": f"–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '{text}' –ø—Ä–∏–Ω—è—Ç–æ. –°–ø–∞—Å–∏–±–æ.",
                "neutral": f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}."
            }
            result = fallback_responses[tone]
            await callback.message.answer(LANGUAGES[lang]["gigachat_error"].format(result))
        
        styled_text = result
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"copy_{styled_text}"),
             InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", callback_data=f"export_pdf_{styled_text}")]
        ])
        await callback.message.edit_text(styled_text, reply_markup=keyboard)
        await state.clear()
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç–∏–ª–µ–π
@router.message(StyleStates.waiting_for_style_text)
async def process_style_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    style = data.get("style")
    text = message.text.strip()
    
    if is_style_restricted(message.from_user.id, style):
        lang = get_user_language(message.from_user.id)
        await message.answer(LANGUAGES[lang]["style_restricted"].format(style))
        await state.clear()
        return
    
    styled_text = STYLES[style](text)
    
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT INTO stylizations (user_id, style, text, created_at) VALUES (?, ?, ?, ?)",
              (message.from_user.id, style, text, datetime.now().isoformat()))
    conn.commit()
    conn.close()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"copy_{styled_text}"),
         InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{style}")],
        [InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", callback_data=f"export_pdf_{styled_text}")]
    ])
    await message.answer(styled_text, reply_markup=keyboard)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–µ—Å–µ—Ç–æ–≤
@router.message(StyleStates.waiting_for_preset_text)
async def process_preset_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    preset = data.get("preset")
    text = message.text.strip()
    
    styled_text = PRESETS[preset](text)
    
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT INTO stylizations (user_id, preset, text, created_at) VALUES (?, ?, ?, ?)",
              (message.from_user.id, preset, text, datetime.now().isoformat()))
    conn.commit()
    conn.close()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"copy_{styled_text}"),
         InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{preset}")],
        [InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", callback_data=f"export_pdf_{styled_text}")]
    ])
    await message.answer(styled_text, reply_markup=keyboard)
    await state.clear()

# –ê–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —à–∞–±–ª–æ–Ω—ã –≥—Ä—É–ø–ø
@router.message()
async def auto_format(message: types.Message):
    text = message.text.lower()
    styled_text = None
    style = None
    preset = None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–∞ –≥—Ä—É–ø–ø—ã
    if message.chat.type in ["group", "supergroup"]:
        group_preset = get_group_template(message.chat.id)
        if group_preset:
            styled_text = PRESETS[group_preset](message.text)
            preset = group_preset
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    if not styled_text:
        for keyword, config in TRIGGERS.items():
            if keyword in text:
                style = config.get("style")
                preset = config.get("preset")
                if style and not is_style_restricted(message.from_user.id, style):
                    styled_text = STYLES[style](message.text)
                elif preset:
                    styled_text = PRESETS[preset](message.text)
                break
    
    if styled_text:
        lang = get_user_language(message.from_user.id)
        if preset in TRIGGERS.values():
            await message.reply(LANGUAGES[lang]["auto_formatted"].format(keyword))
        await message.answer(styled_text)
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("INSERT INTO stylizations (user_id, style, preset, text, created_at) VALUES (?, ?, ?, ?, ?)",
                  (message.from_user.id, style, preset, message.text, datetime.now().isoformat()))
        conn.commit()
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ GigaChat –∫–æ–º–∞–Ω–¥ (–∫—Ä–æ–º–µ smartreply)
@router.message(Command("gigachadify", "make_post", "rewrite"))
async def gigachat_command(message: types.Message):
    command = message.text.split()[0][1:]
    text = message.text.replace(f"/{command}", "").strip() or "–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞"
    lang = get_user_language(message.from_user.id)
    
    result = call_gigachat_api(text, command)
    
    if not result:
        fallback_responses = {
            "gigachadify": f"üí™ <b>–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô {text.upper()}! –ü–û–õ–ù–ê–Ø –ú–û–©–¨!</b> üí™",
            "make_post": f"üìú <b>–≠–ø–∏—á–Ω—ã–π –ø–æ—Å—Ç:</b> {text} ‚ú® #TextStylerPro",
            "rewrite": f"üñã –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–æ: {text.capitalize()} –≤ —Å—Ç–∏–ª—å–Ω–æ–º –≤–∏–¥–µ."
        }
        result = fallback_responses[command]
        await message.answer(LANGUAGES[lang]["gigachat_error"].format(result))
    
    styled_text = result
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"copy_{styled_text}"),
         InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", callback_data=f"export_pdf_{styled_text}")]
    ])
    await message.answer(styled_text, reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–ø—Ä–æ—Å–æ–º
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
